/* eslint-disable */
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = {
    [_ in K]?: never;
};
export type Incremental<T> =
    | T
    | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
    ID: { input: string; output: string };
    String: { input: string; output: string };
    Boolean: { input: boolean; output: boolean };
    Int: { input: number; output: number };
    Float: { input: number; output: number };
    ISO8601DateTime: { input: any; output: any };
};

export type Mutation = {
    userCreate?: Maybe<UserCreatePayload>;
    userDelete?: Maybe<UserDeletePayload>;
    userUpdate?: Maybe<UserUpdatePayload>;
};

export type MutationUserCreateArgs = {
    input: UserCreateInput;
};

export type MutationUserDeleteArgs = {
    input: UserDeleteInput;
};

export type MutationUserUpdateArgs = {
    input: UserUpdateInput;
};

export type Poll = {
    createdAt: Scalars['ISO8601DateTime']['output'];
    id: Scalars['ID']['output'];
    question?: Maybe<Scalars['String']['output']>;
    updatedAt: Scalars['ISO8601DateTime']['output'];
    userId: Scalars['Int']['output'];
};

export type Query = {
    user: User;
    users: Array<User>;
};

export type QueryUserArgs = {
    id: Scalars['ID']['input'];
};

export type User = {
    createdAt: Scalars['ISO8601DateTime']['output'];
    email?: Maybe<Scalars['String']['output']>;
    id: Scalars['ID']['output'];
    name?: Maybe<Scalars['String']['output']>;
    polls?: Maybe<Array<Poll>>;
    pollsCount?: Maybe<Scalars['Int']['output']>;
    updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** Autogenerated input type of UserCreate */
export type UserCreateInput = {
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: InputMaybe<Scalars['String']['input']>;
    email: Scalars['String']['input'];
    name: Scalars['String']['input'];
};

/** Autogenerated return type of UserCreate. */
export type UserCreatePayload = {
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: Maybe<Scalars['String']['output']>;
    errors: Array<Scalars['String']['output']>;
    user: User;
};

/** Autogenerated input type of UserDelete */
export type UserDeleteInput = {
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: InputMaybe<Scalars['String']['input']>;
    id: Scalars['ID']['input'];
};

/** Autogenerated return type of UserDelete. */
export type UserDeletePayload = {
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: Maybe<Scalars['String']['output']>;
    errors: Array<Scalars['String']['output']>;
    user: User;
};

/** Autogenerated input type of UserUpdate */
export type UserUpdateInput = {
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: InputMaybe<Scalars['String']['input']>;
    email?: InputMaybe<Scalars['String']['input']>;
    id: Scalars['ID']['input'];
    name?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UserUpdate. */
export type UserUpdatePayload = {
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: Maybe<Scalars['String']['output']>;
    errors: Array<Scalars['String']['output']>;
    user: User;
};

export type GetUserQueryVariables = Exact<{
    userId: Scalars['ID']['input'];
}>;

export type GetUserQuery = { user: { id: string; name?: string | null } };

export type GetUsersQueryQueryVariables = Exact<{ [key: string]: never }>;

export type GetUsersQueryQuery = { users: Array<{ id: string; name?: string | null }> };
